www.javamex.com

RSA Encryption (Assymmetric encryption) (http://www.javamex.com/tutorials/cryptography/rsa_encryption.shtml)
==============

1. Create an RSA key pair
-------------------------
KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA");
kpg.initialize(2048); //We initialise the generator, telling it the bit length of the modulus that we require
						//Notice that we specify a key length of 2048 bits. Common values are 1024 or 2048. 
						//Choosing an RSA key length is a tradeoff between security and performance. 
KeyPair kp = kpg.genKeyPair();
Key publicKey = kp.getPublic();
Key privateKey = kp.getPrivate();

2. Saving the public and private keys
-------------------------------------
KeyFactory fact = KeyFactory.getInstance("RSA");
RSAPublicKeySpec pub = fact.getKeySpec(kp.getPublic(), RSAPublicKeySpec.class);
RSAPrivateKeySpec priv = fact.getKeySpec(kp.getPrivate(), RSAPrivateKeySpec.class);

saveToFile("public.key", pub.getModulus(), pub.getPublicExponent());
saveToFile("private.key", priv.getModulus(), priv.getPrivateExponent());

3. saveToFile
-------------
//To save the moduli and exponents to file, we can just use boring old serialisation, 
// since the modulus and exponents are just BigInteger objects:
public void saveToFile(String fileName, BigInteger mod, BigInteger exp) throws IOException{
  ObjectOutputStream oout = new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(fileName)));
  try {
    oout.writeObject(mod);
    oout.writeObject(exp);
  }
  catch (Exception e){
    throw new IOException("Unexpected error", e);
  }
  finally{
    oout.close();
  }
}
 
4. Encryption
-------------
PublicKey readKeyFromFile(String keyFileName) throws IOException {
  InputStream in =
    ServerConnection.class.getResourceAsStream(keyFileName);
  ObjectInputStream oin =
    new ObjectInputStream(new BufferedInputStream(in));
  try {
    BigInteger m = (BigInteger) oin.readObject();
    BigInteger e = (BigInteger) oin.readObject();
    RSAPublicKeySpec keySpec = new RSAPublicKeySpec(m, e);
    KeyFactory fact = KeyFactory.getInstance("RSA");
    PublicKey pubKey = fact.generatePublic(keySpec);
    return pubKey;
  } catch (Exception e) {
    throw new RuntimeException("Spurious serialisation error", e);
  } finally {
    oin.close();
  }
}

public byte[] rsaEncrypt(byte[] data) {
  PublicKey pubKey = readKeyFromFile("/public.key");
  Cipher cipher = Cipher.getInstance("RSA");
  cipher.init(Cipher.ENCRYPT_MODE, pubKey);
  byte[] cipherData = cipher.doFinal(src);
  return cipherData;
}

5. Decryption
-------------
The server goes through a very similar process, and the code is trivially similar to the client's. The server reads in its modulus and exponent from its private key file and constructs a corresponding RSAPrivateKeySpec object, using a KeyFactory to translate it into a PrivateKey. This PrivateKey can then be used to initialise a Cipher in DECRYPT_MODE. 




AES Encryption is symmetric key encryption
==========================================
http://www.javamex.com/tutorials/cryptography/symmetric.shtml
PS: This code contains insecurities
1. Encryption
-------------
byte[] key = //... secret sequence of bytes
byte[] dataToSend = ...

Cipher c = Cipher.getInstance("AES");
SecretKeySpec k =
  new SecretKeySpec(key, "AES");
c.init(Cipher.ENCRYPT_MODE, k);
byte[] encryptedData = c.doFinal(dataToSend);

// now send encryptedData to Bob...

2. Decryption
-------------
byte[] key = //... we know the secret!
byte[] encryptedData = //... received from Alice

Cipher c = Cipher.getInstance("AES");
SecretKeySpec k =
  new SecretKeySpec(key, "AES");
c.init(Cipher.DECRYPT_MODE, k);
byte[] data = c.doFinal(encryptedData);

// do something with data


Hash functions
==============
Hash algorithms in Java: 
	1. SHA(SHA-1, SHA-256, SHA-384 and SHA-512) 
	2. MD2 
	3. MD5
Hashes are sometimes called message digests

Hash example
------------
byte[] data = ....

MessageDigest md = MessageDigest.getInstance("SHA-1");
md.update(data);
byte[] hash = md.digest();


If we want to check that a given hash we're sent matches one we've just calculated, then we can use the 
MessageDigest.isEqual() method, passing in the two byte arrays representing the hashes (we could also use 
Arrays.equals()— it really is just a byte-by-byte comparison!). 

